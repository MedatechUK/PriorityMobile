ALTER FUNCTION [dbo].[SVCCALL_PHONE]
(
	-- Add the parameters for the function here
	@DOC INT
)
RETURNS VARCHAR(20)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @ResultVar VARCHAR(20)
	DECLARE @DPHONE VARCHAR(20)
	DECLARE @PPHONE VARCHAR(20)
	DECLARE @CPHONE VARCHAR(20)

	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DPHONE = (SELECT DESTCODES.PHONENUM 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)
	
	SET @PPHONE = (SELECT PHONEBOOK.PHONENUM 
					FROM SERVCALLS,  PHONEBOOK 
					WHERE SERVCALLS.PHONE = PHONEBOOK.PHONE
					AND SERVCALLS.DOC = @DOC)

	SET @CPHONE = (SELECT CUSTOMERS.PHONE 
					FROM DOCUMENTS,  CUSTOMERS 
					WHERE DOCUMENTS.CUST = CUSTOMERS.CUST
					AND DOCUMENTS.DOC = @DOC)
					
	SET @ResultVar = ' '

	IF @DPHONE = '' AND @PPHONE  <> ''
		begin
			set @ResultVar = @PPHONE
		end

	IF @PPHONE= '' AND @DPHONE  <> ''
		begin
			set @ResultVar = @DPHONE
		end

	IF @PPHONE <> '' AND @DPHONE  <> ''
		begin
			set @ResultVar = @DPHONE
		end

	IF @PPHONE = '' AND @DPHONE  = ''
		begin
			set @ResultVar = @CPHONE
		end
	return @ResultVar
END
GO

create FUNCTION [dbo].[SVCCALL_ADDRESS]
(
	-- Add the parameters for the function here
	@PART varCHAR(5),
	@DOC INT
)
RETURNS VARCHAR(20)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @ResultVar VARCHAR(255)
	DECLARE @DADD VARCHAR(20)
	DECLARE @CADD VARCHAR(20)

if @PART = 'A1'
begin
	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DADD = (SELECT DESTCODES.ADDRESS 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)

	SET @CADD = (SELECT CUSTOMERS.ADDRESS 
					FROM DOCUMENTS,  CUSTOMERS 
					WHERE DOCUMENTS.CUST = CUSTOMERS.CUST
					AND DOCUMENTS.DOC = @DOC)
end		


if @PART = 'A2'
begin
	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DADD = (SELECT DESTCODES.ADDRESSA 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)

	SET @CADD = ''
end	


if @PART = 'A3'
begin
	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DADD = (SELECT DESTCODES.STATE 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)

	SET @CADD = (SELECT CUSTOMERS.STATE 
					FROM DOCUMENTS,  CUSTOMERS 
					WHERE DOCUMENTS.CUST = CUSTOMERS.CUST
					AND DOCUMENTS.DOC = @DOC)
end	

if @PART = 'A4'
begin
	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DADD = (SELECT DESTCODES.STATEA 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)

	SET @CADD = ''
end	

if @PART = 'A5'
begin
	--(DESTCODES.PHONENUM <> '' ? DESTCODES.PHONENUM : PHONEBOOK.PHONENUM)
	SET @DADD = (SELECT DESTCODES.ZIP 
				FROM SERVCALLS, DOCUMENTS, DESTCODES 
				WHERE DOCUMENTS.DESTCODE = DESTCODES.DESTCODE
				AND DOCUMENTS.DOC = SERVCALLS.DOC
				AND DOCUMENTS.DOC = @DOC)

	SET @CADD = (SELECT CUSTOMERS.ZIP 
					FROM DOCUMENTS,  CUSTOMERS 
					WHERE DOCUMENTS.CUST = CUSTOMERS.CUST
					AND DOCUMENTS.DOC = @DOC)
end	
			
	SET @ResultVar = ' '

	IF @DADD = '' AND @CADD <> ''
		begin
			set @ResultVar = @CADD
		end

	IF @CADD = '' AND @DADD  <> ''
		begin
			set @ResultVar = @DADD
		end

	IF @CADD <> '' AND @DADD  <> ''
		begin
			set @ResultVar = @DADD
		end

	return @ResultVar
END

GO

ALTER VIEW [dbo].[V_SERVCALL]
AS
SELECT     TOP (100) PERCENT DOCUMENTS.DOCNO, SERVCALLS.STARTDATE AS [Date Opened], dbo.SERVCALLS.PDATE, system.dbo.USERS.USERLOGIN, 
                      dbo.SVCCALL_CODE(dbo.DOCUMENTS.DOC) + ' ' + dbo.SVCCALL_STATUS(dbo.DOCUMENTS.DOC) AS Status, dbo.CUSTOMERS.CUSTDES AS [Customer Name], 
                       dbo.SVCCALL_ADDRESS('A1',dbo.DOCUMENTS.DOC) AS [Address 2],  dbo.SVCCALL_ADDRESS('A2',dbo.DOCUMENTS.DOC) AS [Address 2.1], dbo.SVCCALL_ADDRESS('A2',dbo.DOCUMENTS.DOC) AS [Address 3], 
                       dbo.SVCCALL_ADDRESS('A5',dbo.DOCUMENTS.DOC) AS [Post Code],  dbo.SVCCALL_ADDRESS('A4',dbo.DOCUMENTS.DOC) AS [City/County], dbo.PHONEBOOK.NAME, dbo.SVCCALL_PHONE(dbo.DOCUMENTS.DOC) AS [Phone Number], 
                      dbo.SERVTYPES.SERVTDES, dbo.SERVCALLS.PTIME
FROM         dbo.PHONEBOOK RIGHT OUTER JOIN
                      system.dbo.USERS AS USERS_2 RIGHT OUTER JOIN
                      dbo.SERVTYPES RIGHT OUTER JOIN
                      dbo.DESTCODES INNER JOIN
                      dbo.DOCUMENTS INNER JOIN
                      dbo.SERVCALLS ON dbo.DOCUMENTS.DOC = dbo.SERVCALLS.DOC ON dbo.DESTCODES.DESTCODE = dbo.DOCUMENTS.DESTCODE INNER JOIN
                      dbo.CALLSTATUSES ON dbo.SERVCALLS.CALLSTATUS = dbo.CALLSTATUSES.CALLSTATUS INNER JOIN
                      dbo.CUSTOMERS ON dbo.DOCUMENTS.CUST = dbo.CUSTOMERS.CUST ON dbo.SERVTYPES.SERVTYPE = dbo.SERVCALLS.SERVTYPE LEFT OUTER JOIN
                      system.dbo.USERS INNER JOIN
                      dbo.V_SVCCALLTECHS ON system.dbo.USERS.T$USER = dbo.V_SVCCALLTECHS.TECH ON dbo.SERVCALLS.DOC = dbo.V_SVCCALLTECHS.SERVCALL ON 
                      USERS_2.T$USER = dbo.SERVCALLS.TECHNICIAN3 ON dbo.PHONEBOOK.PHONE = dbo.SERVCALLS.PHONE LEFT OUTER JOIN
                      dbo.DOCUMENTSA ON dbo.DOCUMENTS.DOC = dbo.DOCUMENTSA.DOC
WHERE     (dbo.DOCUMENTS.TYPE = 'Q') AND (dbo.CALLSTATUSES.ACTIVEFLAG = 'Y') AND (dbo.SERVCALLS.PDATE >= dbo.DATETOMIN(GETDATE() - 1)) AND 
                      (dbo.CALLSTATUSES.ZPDA_PDASTATUS = 'Y')
ORDER BY dbo.SERVCALLS.PDATE

GO

ALTER FUNCTION [dbo].[WARHS_EXT] (
) 
RETURNS 
@RET_WARHS_EXT TABLE 
(
	WARHSNAME varchar(10),
	PARTNAME varchar(20),
	PARTDES Varchar(50), 
	QTY REAL,
	PRICE MONEY
)
AS
BEGIN

DECLARE @WARHS_EXT TABLE 
(
	WARHSNAME varchar(10),
	PARTNAME varchar(20),
	PARTDES Varchar(50), 
	QTY REAL,
	PRICE MONEY
)
	-- Fill the table variable with the rows for your result set
	INSERT INTO @WARHS_EXT
	SELECT     dbo.WAREHOUSES.WARHSNAME, dbo.PART.PARTNAME, dbo.PART.PARTDES, SUM(dbo.REALQUANT(dbo.WARHSBAL.BALANCE)) 
						  AS QTY, 0 AS PRICE
	FROM         dbo.WARHSBAL INNER JOIN
						  dbo.PART ON dbo.WARHSBAL.PART = dbo.PART.PART INNER JOIN
						  dbo.WAREHOUSES ON dbo.WARHSBAL.WARHS = dbo.WAREHOUSES.WARHS
	WHERE     (dbo.WARHSBAL.WARHS IN
							  (SELECT DISTINCT WARHS
								FROM          dbo.USERSA
								WHERE      (WARHS > 0))) AND (dbo.WARHSBAL.CUST = - 1)
	GROUP BY dbo.WAREHOUSES.WARHSNAME, dbo.PART.PARTNAME, dbo.PART.PARTDES
	HAVING      (SUM(dbo.REALQUANT(dbo.WARHSBAL.BALANCE)) > 0)

/*AND (dbo.PARTPRICE.PLIST = 15)*/

	INSERT INTO @WARHS_EXT
	SELECT     dbo.WAREHOUSES.WARHSNAME, dbo.PART.PARTNAME, dbo.PART.PARTDES, 9999 AS QTY, 0 AS PRICE
	FROM         dbo.WAREHOUSES CROSS JOIN
						  dbo.PART RIGHT OUTER JOIN
						  dbo.ZATG_KANBAN ON dbo.PART.PART = dbo.ZATG_KANBAN.PART
	WHERE     (dbo.WAREHOUSES.WARHS IN
							  (SELECT     WARHS
								FROM          dbo.USERSA
								WHERE      (WARHS > 0))) AND (dbo.ZATG_KANBAN.PART > 0)
/**/

INSERT INTO @RET_WARHS_EXT
SELECT * FROM @WARHS_EXT
ORDER BY PARTNAME

RETURN 
END