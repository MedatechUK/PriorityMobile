'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4206
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4206.
'
Namespace PriWebSvc
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://priwebsvc.ntsa.org.uk/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoadDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadDataWaitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSignatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.PriLoadSVC.My.MySettings.Default.PriLoadSVC_PriWebSvc_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoadDataCompleted As LoadDataCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadDataWaitCompleted As LoadDataWaitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataCompleted As GetDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSignatureCompleted As SaveSignatureCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://priwebsvc.ntsa.org.uk/LoadData", RequestNamespace:="http://priwebsvc.ntsa.org.uk/", ResponseNamespace:="http://priwebsvc.ntsa.org.uk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadData(ByVal SerialData As String) As Boolean
            Dim results() As Object = Me.Invoke("LoadData", New Object() {SerialData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadDataAsync(ByVal SerialData As String)
            Me.LoadDataAsync(SerialData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadDataAsync(ByVal SerialData As String, ByVal userState As Object)
            If (Me.LoadDataOperationCompleted Is Nothing) Then
                Me.LoadDataOperationCompleted = AddressOf Me.OnLoadDataOperationCompleted
            End If
            Me.InvokeAsync("LoadData", New Object() {SerialData}, Me.LoadDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadDataCompleted(Me, New LoadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://priwebsvc.ntsa.org.uk/LoadDataWait", RequestNamespace:="http://priwebsvc.ntsa.org.uk/", ResponseNamespace:="http://priwebsvc.ntsa.org.uk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadDataWait(ByVal BubbleID As String, ByVal SerialData As String) As String
            Dim results() As Object = Me.Invoke("LoadDataWait", New Object() {BubbleID, SerialData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadDataWaitAsync(ByVal BubbleID As String, ByVal SerialData As String)
            Me.LoadDataWaitAsync(BubbleID, SerialData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadDataWaitAsync(ByVal BubbleID As String, ByVal SerialData As String, ByVal userState As Object)
            If (Me.LoadDataWaitOperationCompleted Is Nothing) Then
                Me.LoadDataWaitOperationCompleted = AddressOf Me.OnLoadDataWaitOperationCompleted
            End If
            Me.InvokeAsync("LoadDataWait", New Object() {BubbleID, SerialData}, Me.LoadDataWaitOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadDataWaitOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadDataWaitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadDataWaitCompleted(Me, New LoadDataWaitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://priwebsvc.ntsa.org.uk/GetData", RequestNamespace:="http://priwebsvc.ntsa.org.uk/", ResponseNamespace:="http://priwebsvc.ntsa.org.uk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetData(ByVal SQL As String) As String
            Dim results() As Object = Me.Invoke("GetData", New Object() {SQL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataAsync(ByVal SQL As String)
            Me.GetDataAsync(SQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataAsync(ByVal SQL As String, ByVal userState As Object)
            If (Me.GetDataOperationCompleted Is Nothing) Then
                Me.GetDataOperationCompleted = AddressOf Me.OnGetDataOperationCompleted
            End If
            Me.InvokeAsync("GetData", New Object() {SQL}, Me.GetDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataCompleted(Me, New GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://priwebsvc.ntsa.org.uk/SaveSignature", RequestNamespace:="http://priwebsvc.ntsa.org.uk/", ResponseNamespace:="http://priwebsvc.ntsa.org.uk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSignature(ByVal SerialData As String) As String
            Dim results() As Object = Me.Invoke("SaveSignature", New Object() {SerialData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSignatureAsync(ByVal SerialData As String)
            Me.SaveSignatureAsync(SerialData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSignatureAsync(ByVal SerialData As String, ByVal userState As Object)
            If (Me.SaveSignatureOperationCompleted Is Nothing) Then
                Me.SaveSignatureOperationCompleted = AddressOf Me.OnSaveSignatureOperationCompleted
            End If
            Me.InvokeAsync("SaveSignature", New Object() {SerialData}, Me.SaveSignatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSignatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSignatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSignatureCompleted(Me, New SaveSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub LoadDataCompletedEventHandler(ByVal sender As Object, ByVal e As LoadDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub LoadDataWaitCompletedEventHandler(ByVal sender As Object, ByVal e As LoadDataWaitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadDataWaitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub GetDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub SaveSignatureCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSignatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSignatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
